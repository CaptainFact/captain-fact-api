stages:
  - prepare
  - test
  - release
  - cleanup

prepare:
  stage: prepare
  tags: [docker]
  script:
    - docker run --name build_cache -v /opt  busybox /bin/true
    - docker cp $(pwd) build_cache:/opt/app

test:
  stage: test
  tags: [docker]
  image:
  before_script:
    - docker network create network_testing
    - docker run -d
      --name postgres_testing
      --network network_testing
      -e POSTGRES_DB=captain_fact_test
      -e POSTGRES_PASSWORD=postgres
      postgres:9.6
  script:
    - docker run --rm
      --network network_testing
      --volumes-from build_cache
      -e MIX_ENV=test
      -e POSTGRES_HOST=postgres_testing
      betree/alpine-elixir-gcc:1.5.1
      /bin/sh -c
      "env && mix local.hex --force && mix local.rebar --force && mix deps.get && mix ecto.setup && mix test"
  after_script:
    - docker stop postgres_testing || /bin/true
    - docker rm postgres_testing || /bin/true
    - docker network rm network_testing || /bin/true

release:
  stage: release
  tags: [docker]
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker build -t registry.gitlab.com/captainfact/captain-fact-api:$CI_COMMIT_REF_SLUG .
    - docker push registry.gitlab.com/captainfact/captain-fact-api:$CI_COMMIT_REF_SLUG

cleanup:
  stage: cleanup
  when: always
  tags: [docker]
  script:
    - docker rm build_cache || /bin/true
    - docker rm captain-fact-api:$CI_COMMIT_REF_SLUG || /bin/true