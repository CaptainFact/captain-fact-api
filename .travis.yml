# ----- Config -----

stages:
  - name: test
  - name: release

env:
  CF_API_REST_IMAGE: captainfact/rest-api:$TRAVIS_BRANCH
  CF_API_GRAPHQL_IMAGE: captainfact/graphql-api:$TRAVIS_BRANCH
  CF_API_ATOM_FEED: captainfact/atom-feed:$TRAVIS_BRANCH
  CF_API_OPENGRAPH_IMAGE: captainfact/opengraph:$TRAVIS_BRANCH

# ---- Jobs ----

jobs:
  include:
    - stage: test
      language: elixir
      elixir: "1.6"
      otp_release: "21.0"
      cache: { paths: ["_build", "deps"] }
      addons: { postgresql: "9.6" }
      env:
        - MIX_ENV=test
      before_script:
        - mix local.hex --force
        - mix local.rebar --force
        - mix deps.get
        - mix ecto.create
        - mix ecto.migrate
      script:
        - mix coveralls.travis --umbrella
        - mix format --check-formatted

    - stage: release
      if: branch IN (master, staging) AND type != pull_request
      language: generic
      sudo: required
      services: [docker]
      script:
        - set -e
        -  # ---- Build ----
        - docker build --build-arg APP=captain_fact -t ${CF_API_REST_IMAGE} .
        - docker build --build-arg APP=cf_graphql   -t ${CF_API_GRAPHQL_IMAGE} .
        - docker build --build-arg APP=cf_atom_feed -t ${CF_API_ATOM_FEED} .
        - docker build --build-arg APP=cf_opengraph -t ${CF_API_OPENGRAPH_IMAGE} .
        -  # ---- Push release ----
        - docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD";
        - docker push $CF_API_REST_IMAGE
        - docker push $CF_API_GRAPHQL_IMAGE
        - docker push $CF_API_ATOM_FEED
        - docker push $CF_API_OPENGRAPH_IMAGE
